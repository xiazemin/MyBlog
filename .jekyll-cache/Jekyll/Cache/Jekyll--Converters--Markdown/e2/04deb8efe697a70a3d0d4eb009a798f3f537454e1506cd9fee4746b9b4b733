I"\T<p>文本终端的颜色可以使用“ANSI非常规字符序列”来生成。举例： 
　　　　echo -e “\033[44;37;5m ME \033[0m COOL” 
　　　　以上命令设置作用如下：背景色为蓝色，前景色为白色，字体闪烁，输出字符“ME”，然后重新设置屏幕到缺省设置，输出字符 “COOL”。“e”是命令 echo 的一个可选项，它用于激活特殊字符的解析器。“\033”引导非常规字符序列。“m”意味着设置属性然后结束非常规字符序列，这个例子里真正有效的字符是 “44;37;5” 和“0”。修改“44;37;5”可以生成不同颜色的组合，数值和编码的前后顺序没有关系。 
<!-- more --></p>

<p>可以选择的编码如下所示：</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> 
　　　　编码 颜色/动作 
　　　　0 重新设置属性到缺省设置 
　　　　1 设置粗体 
　　　　2 设置一半亮度（模拟彩色显示器的颜色） 
　　　　4 设置下划线（模拟彩色显示器的颜色） 
　　　　5 设置闪烁 
　　　　7 设置反向图象 
　　　　22 设置一般密度 
　　　　24 关闭下划线 
　　　　25 关闭闪烁 
　　　　27 关闭反向图象 
　　　　30 设置黑色前景 
　　　　31 设置红色前景 
　　　　32 设置绿色前景 
　　　　33 设置棕色前景 
　　　　34 设置蓝色前景 
　　　　35 设置紫色前景 
　　　　36 设置青色前景 
　　　　37 设置白色前景 
　　　　38 在缺省的前景颜色上设置下划线 
　　　　39 在缺省的前景颜色上关闭下划线 
　　　　40 设置黑色背景 
　　　　41 设置红色背景 
　　　　42 设置绿色背景 
　　　　43 设置棕色背景 
　　　　44 设置蓝色背景 
　　　　45 设置紫色背景 
　　　　46 设置青色背景 
　　　　47 设置白色背景 
　　　　49 设置缺省黑色背景 
　</code></pre></figure>

<p>　　　　例如：在编译脚本文件时，对服务启动完成后的OK字符串设置成绿色
除了echo还有printf也可以显示颜色，这里就不多说了，用法一样的。那么开始用php调用吧。</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>  
<span class="k">function</span> <span class="n">color_a</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$string</span><span class="p">)</span> <span class="p">{</span>  
<span class="nv">$cmd</span><span class="o">=</span><span class="s2">"echo -ne </span><span class="se">\"\033</span><span class="s2">[31m"</span><span class="mf">.</span><span class="nv">$string</span><span class="mf">.</span><span class="s2">" </span><span class="se">\033</span><span class="s2">[0m</span><span class="se">\n\"</span><span class="s2">"</span><span class="p">;</span>  
<span class="nv">$a</span><span class="o">=</span><span class="nb">exec</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>  
<span class="k">print</span> <span class="s2">"</span><span class="nv">$a</span><span class="s2">"</span><span class="mf">.</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>  
<span class="p">}</span>  
<span class="k">function</span> <span class="n">color_b</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$string</span><span class="p">)</span> <span class="p">{</span>  
<span class="nv">$cmd</span><span class="o">=</span><span class="s2">"printf </span><span class="se">\"\033</span><span class="s2">[01;40;32m"</span><span class="mf">.</span><span class="nv">$string</span><span class="mf">.</span><span class="s2">"</span><span class="se">\033</span><span class="s2">[0m</span><span class="se">\n\"</span><span class="s2">"</span><span class="p">;</span>  
<span class="nv">$a</span><span class="o">=</span><span class="nb">exec</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>  
<span class="k">print</span> <span class="s2">"</span><span class="nv">$a</span><span class="s2">"</span><span class="mf">.</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>  
<span class="p">}</span>  
<span class="nv">$string</span><span class="o">=</span><span class="s2">"aaaaaaaaaaaa"</span><span class="p">;</span>  
<span class="nf">color_a</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>  
<span class="nf">color_b</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
</pre></td><td class="code"><pre>功能说明：显示文字。
语 　 法：echo <span class="o">[</span><span class="nt">-ne</span><span class="o">][</span>字符串] / <span class="nb">echo</span> <span class="o">[</span><span class="nt">--help</span><span class="o">][</span><span class="nt">--version</span><span class="o">]</span>
补充说明：echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开, 并在最后加上换行号。
参 　 数：    
<span class="nt">-n</span> 不要在最后自动换行    
<span class="nt">-e</span> 打开反斜杠ESC转义。
若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：           
<span class="se">\a</span> 发出警告声；           
<span class="se">\b</span> 删除前一个字符；           
<span class="se">\c</span> 最后不加上换行符号；           
<span class="se">\f</span> 换行但光标仍旧停留在原来的位置；           
<span class="se">\n</span> 换行且光标移至行首；           
<span class="se">\r</span> 光标移至行首，但不换行；           
<span class="se">\t</span> 插入tab；           
<span class="se">\v</span> 与<span class="se">\f</span>相同；           
<span class="se">\\</span> 插入<span class="se">\字</span>符；           
<span class="se">\n</span>nn 插入nnn（八进制）所代表的ASCII字符；    
<span class="nt">-E</span> 取消反斜杠ESC转义 <span class="o">(</span>默认<span class="o">)</span>    
<span class="nt">-help</span> 显示帮助
    <span class="nt">-version</span> 显示版本信息
<span class="c">############################################################ #</span>
echo输出颜色文本 echo命令改变样式，以输出不同颜色的文本，必须有 <span class="nt">-e</span> 选项<span class="o">(</span>开启echo中的转义<span class="o">)</span>。
文本终端的显示颜色可以使用“ANSI非常规字符序列”来生成。
例如：echo <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[44;37;5m ME</span><span class="se">\0</span><span class="s2">33[0m COOL"</span>
解释：<span class="s2">"</span><span class="se">\0</span><span class="s2">33[44;37;5m ME "</span>设置背景为蓝色，前景为白色，闪烁光标，输出字符“ME”；      
<span class="s2">"</span><span class="se">\0</span><span class="s2">33[0m COOL"</span>重新设置屏幕到缺省设置，输出字符 “COOL”。      
<span class="s2">"e"</span>是命令echo的一个可选项，它用于激活特殊字符的解析器。
<span class="s2">"</span><span class="se">\0</span><span class="s2">33"</span>引导非常规字符序列<span class="o">(</span>即<span class="s2">"</span><span class="se">\0</span><span class="s2">33["</span>表示终端转义字符开始，
<span class="s2">"</span><span class="se">\0</span><span class="s2">33"</span>即退出键&lt;ESC&gt;的ASCII码<span class="o">)</span>。
<span class="s2">"m"</span>意味着设置属性然后结束非常规字符序列，这个例子里真正有效的字符是<span class="s2">"44;37;5"</span>和<span class="s2">"0"</span>。
修改<span class="s2">"44;37;5"</span>可以生成不同颜色的组合，数值和编码的前后顺序没有关系。     
    可以选择的编码如下所示<span class="o">(</span>这些颜色是ANSI标准颜色<span class="o">)</span>：           编码          颜色/动作          
0      　     重新设置属性到缺省设置          
1     　      设置粗体          
2     　      设置一半亮度<span class="o">(</span>模拟彩色显示器的颜色<span class="o">)</span>          
4     　      设置下划线<span class="o">(</span>模拟彩色显示器的颜色<span class="o">)</span>          
5     　      设置闪烁          
7     　      设置反向图象          
22    　      设置一般密度          
24    　      关闭下划线          
25     　     关闭闪烁          
27     　     关闭反向图象          
30      　    设置黑色前景          
31   　       设置红色前景          
32   　       设置绿色前景          
33   　       设置黄色前景          
34   　       设置蓝色前景          
35    　      设置紫色前景          
36     　     设置青色前景          
37    　      设置白色<span class="o">(</span>灰色<span class="o">)</span>前景          
38      　    在缺省的前景颜色上设置下划线          
39      　    在缺省的前景颜色上关闭下划线          
40      　    设置黑色背景          
41      　    设置红色背景          
42     　     设置绿色背景          
43     　     设置黄色背景          
44     　     设置蓝色背景          
45     　     设置紫色背景          
46     　     设置青色背景          
47      　    设置白色<span class="o">(</span>灰色<span class="o">)</span>背景          
49      　    设置缺省黑色背景    
其他有趣的代码还有：         
<span class="se">\0</span>33[2J  　   清除屏幕          
<span class="se">\0</span>33[0q  　   关闭所有的键盘指示灯          
<span class="se">\0</span>33[1q 　    设置<span class="s2">"滚动锁定"</span>指示灯<span class="o">(</span>Scroll Lock<span class="o">)</span>          
<span class="se">\0</span>33[2q 　    设置<span class="s2">"数值锁定"</span>指示灯<span class="o">(</span>Num Lock<span class="o">)</span>          
<span class="se">\0</span>33[3q 　    设置<span class="s2">"大写锁定"</span>指示灯<span class="o">(</span>Caps Lock<span class="o">)</span>          
<span class="se">\0</span>33[15:40H   把关闭移动到第15行，40列          
<span class="se">\0</span>07  　　    发蜂鸣生beep
一些说明：     前景颜色各数字是对应背景颜色减去10。     结束非常规字符序列的<span class="s2">"m"</span>要紧跟前面的数字，不能有空格。    
命令也可以写成echo <span class="nt">-e</span> <span class="s2">"^[[44;37;5m ME </span><span class="se">\0</span><span class="s2">33[0m COOL"</span>，其中的<span class="s2">"^["</span>是先按Ctrl-V,然后再按&lt;ESC&gt;键产生的。
    输出带有颜色的文本，echo命令必须带有选项<span class="s2">"-e"</span>。
这种方法只能暂时改变echo命令输出的文本的样式，logout后就恢复为默认。修改.bashrc文件，可以修改默认的显示样式。 如：在.bashrc文件的最后面追加一行：echo <span class="nt">-e</span> <span class="s1">'\033[47;30m'</span>。
<span class="c">#----------------------------------------------------------- #</span>
建议:在shell文件的最前面，将echo命令的输出样式定义成变量。    
<span class="c"># define echo terminal style    </span>
<span class="c"># color: 0~6 --&gt; black, red, green, yellow, blue, purple, cyan, grey    </span>
<span class="nb">export </span><span class="nv">ECHO_STYLE_00</span><span class="o">=</span><span class="s2">"</span><span class="se">\0</span><span class="s2">33[0m"</span>       
<span class="c"># default style(black background, white foreground)    </span>
<span class="nb">export </span><span class="nv">ECHO_STYLE_01</span><span class="o">=</span><span class="s2">"</span><span class="se">\0</span><span class="s2">33[41;33;1m"</span> 
<span class="c"># red background, yellow foregound bold    </span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ECHO_STYLE_01</span><span class="k">}</span><span class="s2">echo command terminal style example</span><span class="k">${</span><span class="nv">ECHO_STYLE_00</span><span class="k">}</span><span class="s2">"</span>
<span class="c">############################################################ #</span>
echo命令的其他用法
1<span class="o">)</span>.光标跳到第60列，然后显示一个OK。    
格式：echo <span class="nt">-en</span> <span class="s1">'\033[60G'</span> <span class="o">&amp;&amp;</span> <span class="nb">echo </span>OK    
说明：<span class="s2">"</span><span class="se">\0</span><span class="s2">33["</span>是终端转义字符开始，60G是命令。
<span class="c">############################################################</span>
然后给几个比较强大的脚本函数 1） cfont <span class="c">#by zuoyang http://hi.baidu.com/test/</span>
cfont<span class="o">()</span>
<span class="o">{</span> <span class="k">while</span> <span class="o">((</span><span class="nv">$#!</span><span class="o">=</span>0<span class="o">))</span>
<span class="k">do         case</span> <span class="nv">$1</span> <span class="k">in</span>                
　-b<span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">" "</span><span class="p">;</span>                 <span class="p">;;</span>                
　　　-t<span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">"</span><span class="p">;</span>                 <span class="p">;;</span>                
　-n<span class="p">)</span>     <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-black</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[30m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-red</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[31m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-green</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[32m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-yellow</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[33m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-blue</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[34m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-purple</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[35m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-cyan</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[36m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-white</span><span class="p">|</span><span class="nt">-gray</span><span class="p">)</span> <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[37m"</span><span class="p">;</span>                 <span class="p">;;</span>                
               <span class="nt">-reset</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[0m"</span><span class="p">;</span>                 <span class="p">;;</span>                
              <span class="nt">-h</span><span class="p">|</span><span class="nt">-help</span><span class="p">|</span><span class="nt">--help</span><span class="p">)</span>                         <span class="nb">echo</span> <span class="s2">"Usage: cfont -color1 message1 -color2 message2 ..."</span><span class="p">;</span>                        
                   <span class="nb">echo</span> <span class="s2">"eg:       cfont -red [ -blue message1 message2 -red ]"</span><span class="p">;</span>                 <span class="p">;;</span>                
               <span class="k">*</span><span class="p">)</span>                 <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>                 <span class="p">;;</span>        
<span class="k">esac</span>        
<span class="nb">shift
</span><span class="k">done</span> <span class="o">}</span>
使用方法是 cfont -颜色 字符串...
如： cfont <span class="nt">-cyan</span> abc
注意使用时要换行需要加入 <span class="nt">-n</span> 选项。想要恢复默认的要加入 <span class="nt">-reset</span>选项。
2） 颜色码表
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="c">#!/bin/bash T='gYw'# The test text</span>
<span class="nb">echo
echo</span> <span class="s2">"        default 40m     41m     42m     43m     44m     45m     46m 47m"</span><span class="c">## FGs 为前景(foreground)色, BG 为背景(background)色</span>
<span class="k">for </span>FGs <span class="k">in</span> <span class="s1">'    m'</span> <span class="s1">'   1m'</span> <span class="s1">' 30m'</span> <span class="s1">'1;30m'</span> <span class="s1">' 31m'</span> <span class="s1">'1;31m'</span> <span class="s1">' 32m'</span> <span class="s1">'1;32m'</span> <span class="s1">' 33m'</span> <span class="s1">'1;33m'</span> <span class="s1">' 34m'</span> <span class="s1">'1;34m'</span> <span class="s1">' 35m'</span> <span class="s1">'1;35m'</span> <span class="s1">' 36m'</span> <span class="s1">'1;36m'</span> <span class="s1">' 37m'</span> <span class="s1">'1;37m'</span>        
<span class="k">do         </span><span class="nv">FG</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$FGs</span>|tr <span class="nt">-d</span> <span class="s1">' '</span><span class="si">)</span>        
             <span class="nb">echo</span> <span class="nt">-en</span> <span class="s2">" </span><span class="nv">$FGs</span><span class="s2"> </span><span class="se">\0</span><span class="s2">33[</span><span class="nv">$FG</span><span class="s2"> </span><span class="nv">$T</span><span class="s2"> "</span>        
             <span class="k">for </span>BG <span class="k">in </span>40m 41m 42m 43m 44m 45m 46m 47m<span class="p">;</span>                
             <span class="k">do                 </span><span class="nb">echo</span> <span class="nt">-en</span> <span class="s2">" </span><span class="se">\0</span><span class="s2">33[</span><span class="nv">$FG</span><span class="se">\0</span><span class="s2">33[</span><span class="nv">$BG</span><span class="s2"> </span><span class="nv">$T</span><span class="s2"> </span><span class="se">\0</span><span class="s2">33[0m"</span>        
           <span class="k">done        
</span><span class="nb">echo
</span><span class="k">done
</span><span class="nb">echo</span>
</pre></td></tr></tbody></table></code></pre></figure>
:ET